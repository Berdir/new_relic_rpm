<?php
/**
 * @file
 * Drupal module implementing New Relic
 */

/**
 * Implementation of hook_menu().
 */
function new_relic_rpm_menu() {
  $items['admin/content/new-relic-rpm'] = array(
    'title' => 'New Relic RPM deployment',
    'description' => "Create a new deployment for this site's App.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('new_relic_rpm_deploy'),
    'access arguments' => array('create new relic rpm deployments'),
    'file' => 'new_relic_rpm.settings.inc',
  );
  $items['admin/settings/new-relic-rpm'] = array(
    'title' => 'New Relic RPM Settings',
    'description' => 'Alter settings and mange your New Relic RPM Integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('new_relic_rpm_settings'),
    'access arguments' => array('administer new relic rpm'),
    'file' => 'new_relic_rpm.settings.inc',
  );
  $items['admin/reports/new-relic-rpm'] = array(
    'title' => 'New Relic RPM reports',
    'description' => 'View RPM reports and statistics.',
    'page callback' => 'new_relic_rpm_reporting',
    'access arguments' => array('view new relic rpm reports'),
    'file' => 'new_relic_rpm.reports.inc',
  );
  $items['admin/reports/new-relic-rpm/details/%'] = array(
    'title' => 'Application Details',
    'description' => 'Get details for a specific application.',
    'page callback' => 'new_relic_rpm_reporting_details',
    'page arguments' => array(4, 5),
    'access arguments' => array('view new relic rpm reports'),
    'file' => 'new_relic_rpm.reports.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function new_relic_rpm_perm() {
  return array(
    'administer new relic rpm',
    'view new relic rpm reports',
    'create new relic rpm deployments',
  );
}

/**
 * Implementation of hook_cron().
 *
 * This is used to set cron tasks to be not tracked by RPM if so desired.
 */
function new_relic_rpm_cron() {
  $cron_tracking = variable_get('new_relic_rpm_track_cron', 'norm');
  if ($cron_tracking == 'bg') {
    newrelic_background_job(TRUE);
  }
  elseif ($cron_tracking == 'ignore') {
    newrelic_ignore_transaction(TRUE);
  }
}

/**
 * Implementation of hook_boot().
 *
 * This is used to set various RPM settings by URL.
 */
function new_relic_rpm_boot() {

  $ignore_urls = variable_get('new_relic_rpm_ignore_urls', '');
  $bg_urls = variable_get('new_relic_rpm_bg_urls', '');
  $exclu_urls = variable_get('new_relic_rpm_exclusive_urls', '');

  if (!empty($exclu_urls)) {
    if (!drupal_match_path($_GET['q'], $exclu_urls)) {
      newrelic_ignore_transaction(TRUE);
      return;
    }
  }

  if (!empty($ignore_urls)) {
    if (drupal_match_path($_GET['q'], $ignore_urls)) {
      newrelic_ignore_transaction(TRUE);
      return;
    }
  }

  if (!empty($bg_urls)) {
    if (drupal_match_path($_GET['q'], $bg_urls)) {
      newrelic_background_job(TRUE);
      return;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Add a submit action to the system_module enable/disable form
 */
function new_relic_rpm_form_system_modules_alter(&$form, &$form_state) {

  if (variable_get('new_relic_rpm_module_deployment', FALSE) &&
      variable_get('new_relic_rpm_app_name', FALSE)) {

    $api_key = variable_get('new_relic_rpm_api_key', '');
    // If the API Key and/or App name is/are not set, there is no sense in attempting to create deployments.
    if (!empty($api_key)) {
      // We need our module check to run first--before the actuall install is done by Drupal.
      $form['#submit'][-1000] = 'new_relic_rpm_modules_enabled';
      ksort($form['#submit']);
      reset($form['#submit']);
    }
  }
}

/**
 * Submit callback for system module page.
 *
 * Because we need to determine which modules Drupal is going to install, we
 * are going to perform the same actions as the actual module install process,
 * minus the actual installation of the modules.
 */
function new_relic_rpm_modules_enabled($form, &$form_state) {
  include_once './includes/install.inc';
  $new_modules = array();
  $enable_modules = array();
  $disable_modules = array();

  // If we are coming from the confirm form...
  if (!isset($form_state['storage'])) {
    // Merge in disabled active modules since they should be enabled.
    // They don't appear because disabled checkboxes are not submitted
    // by browsers.
    $form_state['values']['status'] = array_merge($form_state['values']['status'], $form_state['values']['disabled_modules']);

    // Check values for dependency that we can't install.
    $dependencies = system_module_build_dependencies($form_state['values']['validation_modules'], $form_state['values']);

  }
  else {
    $dependencies = NULL;
  }

  // Return if there are dependencies and they were not yet confirmed.
  if ($dependencies && !isset($form_state['values']['confirm'])) {
    return;
  }

  // Dependencies are covered. Drupal is going to install modules. Find out which.
  foreach ($form_state['values']['status'] as $key => $choice) {
    if ($choice) {
      if (drupal_get_installed_schema_version($key) == SCHEMA_UNINSTALLED) {
        $new_modules[] = $key;
      }
      else {
        $enable_modules[] = $key;
      }
    }
    else {
      $disable_modules[] = $key;
    }
  }

  // Validate new modules.
  foreach ($new_modules as $key => $module) {
    if (!drupal_check_module($module)) {
      unset($new_modules[$key]);
    }
  }

  $old_module_list = module_list();

  $new_modules = array_diff(array_merge($enable_modules, $new_modules), $old_module_list);
  $disable_modules = array_intersect($disable_modules, $old_module_list);

  // Make the Deploy call to New Relic.
  if (!empty($new_modules) || !empty($disable_modules)) {
    new_relic_rpm_module_deploy($new_modules, $disable_modules);
  }
}

/**
 * Log module enable/disable actions as a deploy call to New Relic RPM.
 */
function new_relic_rpm_module_deploy($new_modules, $disable_modules) {
  $modules_installed = !empty($new_modules);
  $modules_removed = !empty($disable_modules);

  if ($modules_installed) {
    $m_inst = 'Modules Installed: ' . implode(', ', $new_modules ) . "\n";
  }
  else {
    $m_inst = '';
  }

  if ($modules_removed) {
    $m_remv = 'Modules Removed: ' . implode(', ', $disable_modules) . "\n";
  }
  else {
    $m_remv = '';
  }

  $post_vars['deployment[application_id]'] = variable_get('new_relic_rpm_app_name', '');
  $post_vars['deployment[user]'] = 'Drupal Module Install/Uninstall';
  $post_vars['deployment[description]'] = 'Drupal modules were installed: ' . ($modules_installed ? 'YES' : 'NO') . ' and uninstalled: ' . ($modules_removed ? 'YES' : 'NO');
  $post_vars['deployment[changelog]'] = $m_inst . $m_remv;
  $deployments = new_relic_rpm_curl('https://rpm.newrelic.com/deployments.xml', $post_vars);

  watchdog('New Relic RPM', 'Module install/uninstall action logged as deployment. Log data: %details', array('%details' => $deployments));
}

/**
 * This is the generic cURL function all New Relic Web API calls go through.
 */
function new_relic_rpm_curl($url, $post = array()) {

  $api_key = variable_get('new_relic_rpm_api_key', '');

  // Set the header with the API key.
  $headers[] = "http-x-license-key: {$api_key}";

  // Set up the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  if (!empty($post)) {
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
  }
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);
  $return_data = curl_exec($ch);

  if (stristr($return_data, 'Access denied')) {
    return FALSE;
  }

  return $return_data;
}
